// Copyright 2013 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

***REMOVED***
***REMOVED*** @fileoverview The SafeUrl type and its builders.
***REMOVED***
***REMOVED*** TODO(user): Link to document stating type contract.
***REMOVED***

goog.provide('goog.html.SafeUrl');

goog.require('goog.asserts');
goog.require('goog.i18n.bidi.Dir');
goog.require('goog.i18n.bidi.DirectionalString');
goog.require('goog.string.Const');
goog.require('goog.string.TypedString');



***REMOVED***
***REMOVED*** A string that is safe to use in URL context in DOM APIs and HTML documents.
***REMOVED***
***REMOVED*** A SafeUrl is a string-like object that carries the security type contract
***REMOVED*** that its value as a string will not cause untrusted script execution
***REMOVED*** when evaluated as a hyperlink URL in a browser.
***REMOVED***
***REMOVED*** Values of this type are guaranteed to be safe to use in URL/hyperlink
***REMOVED*** contexts, such as, assignment to URL-valued DOM properties, or
***REMOVED*** interpolation into a HTML template in URL context (e.g., inside a href
***REMOVED*** attribute), in the sense that the use will not result in a
***REMOVED*** Cross-Site-Scripting vulnerability.
***REMOVED***
***REMOVED*** Note that, as documented in {@code goog.html.SafeUrl.unwrap}, this type's
***REMOVED*** contract does not guarantee that instances are safe to interpolate into HTML
***REMOVED*** without appropriate escaping.
***REMOVED***
***REMOVED*** Note also that this type's contract does not imply any guarantees regarding
***REMOVED*** the resource the URL refers to.  In particular, SafeUrls are <b>not</b>
***REMOVED*** safe to use in a context where the referred-to resource is interpreted as
***REMOVED*** trusted code, e.g., as the src of a script tag.
***REMOVED***
***REMOVED*** Instances of this type must be created via the factory methods
***REMOVED*** ({@code goog.html.SafeUrl.from}, {@code goog.html.SafeUrl.sanitize}), etc and
***REMOVED*** not by invoking its constructor.  The constructor intentionally takes no
***REMOVED*** parameters and the type is immutable; hence only a default instance
***REMOVED*** corresponding to the empty string can be obtained via constructor invocation.
***REMOVED***
***REMOVED*** @see goog.html.SafeUrl#fromConstant
***REMOVED*** @see goog.html.SafeUrl#from
***REMOVED*** @see goog.html.SafeUrl#sanitize
***REMOVED***
***REMOVED*** @final
***REMOVED*** @struct
***REMOVED*** @implements {goog.i18n.bidi.DirectionalString}
***REMOVED*** @implements {goog.string.TypedString}
***REMOVED***
goog.html.SafeUrl = function() {
 ***REMOVED*****REMOVED***
  ***REMOVED*** The contained value of this SafeUrl.  The field has a purposely ugly
  ***REMOVED*** name to make (non-compiled) code that attempts to directly access this
  ***REMOVED*** field stand out.
  ***REMOVED*** @private {string}
 ***REMOVED*****REMOVED***
  this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = '';

 ***REMOVED*****REMOVED***
  ***REMOVED*** A type marker used to implement additional run-time type checking.
  ***REMOVED*** @see goog.html.SafeUrl#unwrap
  ***REMOVED*** @const
  ***REMOVED*** @private
 ***REMOVED*****REMOVED***
  this.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ =
      goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
***REMOVED***


***REMOVED***
***REMOVED*** The innocuous string generated by goog.html.SafeUrl.sanitize when passed
***REMOVED*** an unsafe URL.
***REMOVED***
***REMOVED*** about:invalid is registered in
***REMOVED*** http://www.w3.org/TR/css3-values/#about-invalid.
***REMOVED*** http://tools.ietf.org/html/rfc6694#section-2.2.1 permits about URLs to
***REMOVED*** contain a fragment, which is not to be considered when determining if an
***REMOVED*** about URL is well-known.
***REMOVED***
***REMOVED*** Using about:invalid seems preferable to using a fixed data URL, since
***REMOVED*** browsers might choose to not report CSP violations on it, as legitimate
***REMOVED*** CSS function calls to attr() can result in this URL being produced. It is
***REMOVED*** also a standard URL which matches exactly the semantics we need:
***REMOVED*** "The about:invalid URI references a non-existent document with a generic
***REMOVED*** error condition. It can be used when a URI is necessary, but the default
***REMOVED*** value shouldn't be resolveable as any type of document".
***REMOVED***
***REMOVED*** @const {string}
***REMOVED***
goog.html.SafeUrl.INNOCUOUS_STRING = 'about:invalid#zClosurez';


***REMOVED***
***REMOVED*** @override
***REMOVED*** @const
***REMOVED***
goog.html.SafeUrl.prototype.implementsGoogStringTypedString = true;


***REMOVED***
***REMOVED*** Returns this SafeUrl's value a string.
***REMOVED***
***REMOVED*** IMPORTANT: In code where it is security relevant that an object's type is
***REMOVED*** indeed {@code SafeUrl}, use {@code goog.html.SafeUrl.unwrap} instead of this
***REMOVED*** method. If in doubt, assume that it's security relevant. In particular, note
***REMOVED*** that goog.html functions which return a goog.html type do not guarantee that
***REMOVED*** the returned instance is of the right type. For example:
***REMOVED***
***REMOVED*** <pre>
***REMOVED*** var fakeSafeHtml = new String('fake');
***REMOVED*** fakeSafeHtml.__proto__ = goog.html.SafeHtml.prototype;
***REMOVED*** var newSafeHtml = goog.html.SafeHtml.htmlEscape(fakeSafeHtml);
***REMOVED*** // newSafeHtml is just an alias for fakeSafeHtml, it's passed through by
***REMOVED*** // goog.html.SafeHtml.htmlEscape() as fakeSafeHtml instanceof
***REMOVED*** // goog.html.SafeHtml.
***REMOVED*** </pre>
***REMOVED***
***REMOVED*** IMPORTANT: The guarantees of the SafeUrl type contract only extend to the
***REMOVED*** behavior of browsers when interpreting URLs. Values of SafeUrl objects MUST
***REMOVED*** be appropriately escaped before embedding in a HTML document. Note that the
***REMOVED*** required escaping is context-sensitive (e.g. a different escaping is
***REMOVED*** required for embedding a URL in a style property within a style
***REMOVED*** attribute, as opposed to embedding in a href attribute).
***REMOVED***
***REMOVED*** @see goog.html.SafeUrl#unwrap
***REMOVED*** @override
***REMOVED***
goog.html.SafeUrl.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
***REMOVED***


***REMOVED***
***REMOVED*** @override
***REMOVED*** @const
***REMOVED***
goog.html.SafeUrl.prototype.implementsGoogI18nBidiDirectionalString = true;


***REMOVED***
***REMOVED*** Returns this URLs directionality, which is always {@code LTR}.
***REMOVED*** @override
***REMOVED***
goog.html.SafeUrl.prototype.getDirection = function() {
  return goog.i18n.bidi.Dir.LTR;
***REMOVED***


if (goog.DEBUG) {
 ***REMOVED*****REMOVED***
  ***REMOVED*** Returns a debug string-representation of this value.
  ***REMOVED***
  ***REMOVED*** To obtain the actual string value wrapped in a SafeUrl, use
  ***REMOVED*** {@code goog.html.SafeUrl.unwrap}.
  ***REMOVED***
  ***REMOVED*** @see goog.html.SafeUrl#unwrap
  ***REMOVED*** @override
 ***REMOVED*****REMOVED***
  goog.html.SafeUrl.prototype.toString = function() {
    return 'SafeUrl{' + this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ +
        '}';
 ***REMOVED*****REMOVED***
}


***REMOVED***
***REMOVED*** Performs a runtime check that the provided object is indeed a SafeUrl
***REMOVED*** object, and returns its value.
***REMOVED***
***REMOVED*** IMPORTANT: The guarantees of the SafeUrl type contract only extend to the
***REMOVED*** behavior of  browsers when interpreting URLs. Values of SafeUrl objects MUST
***REMOVED*** be appropriately escaped before embedding in a HTML document. Note that the
***REMOVED*** required escaping is context-sensitive (e.g. a different escaping is
***REMOVED*** required for embedding a URL in a style property within a style
***REMOVED*** attribute, as opposed to embedding in a href attribute).
***REMOVED***
***REMOVED*** Note that the returned value does not necessarily correspond to the string
***REMOVED*** with which the SafeUrl was constructed, since goog.html.SafeUrl.sanitize
***REMOVED*** will percent-encode many characters.
***REMOVED***
***REMOVED*** @param {!goog.html.SafeUrl} safeUrl The object to extract from.
***REMOVED*** @return {string} The SafeUrl object's contained string, unless the run-time
***REMOVED***     type check fails. In that case, {@code unwrap} returns an innocuous
***REMOVED***     string, or, if assertions are enabled, throws
***REMOVED***     {@code goog.asserts.AssertionError}.
***REMOVED***
goog.html.SafeUrl.unwrap = function(safeUrl) {
  // Perform additional Run-time type-checking to ensure that safeUrl is indeed
  // an instance of the expected type.  This provides some additional protection
  // against security bugs due to application code that disables type checks.
  // Specifically, the following checks are performed:
  // 1. The object is an instance of the expected type.
  // 2. The object is not an instance of a subclass.
  // 3. The object carries a type marker for the expected type. "Faking" an
  // object requires a reference to the type marker, which has names intended
  // to stand out in code reviews.
  if (safeUrl instanceof goog.html.SafeUrl &&
      safeUrl.constructor === goog.html.SafeUrl &&
      safeUrl.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ ===
          goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeUrl.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
  } else {
    goog.asserts.fail('expected object of type SafeUrl, got \'' +
                      safeUrl + '\'');
    return 'type_error:SafeUrl';

  }
***REMOVED***


***REMOVED***
***REMOVED*** Creates a SafeUrl object from a compile-time constant string.
***REMOVED***
***REMOVED*** Compile-time constant strings are inherently program-controlled and hence
***REMOVED*** trusted.
***REMOVED***
***REMOVED*** @param {!goog.string.Const} url A compile-time-constant string from which to
***REMOVED***         create a SafeUrl.
***REMOVED*** @return {!goog.html.SafeUrl} A SafeUrl object initialized to {@code url}.
***REMOVED***
goog.html.SafeUrl.fromConstant = function(url) {
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse_(
      goog.string.Const.unwrap(url));
***REMOVED***


***REMOVED***
***REMOVED*** A pattern that recognizes a commonly useful subset of URLs that satisfy
***REMOVED*** the SafeUrl contract.
***REMOVED***
***REMOVED*** This regular expression matches a subset of URLs that will not cause script
***REMOVED*** execution if used in URL context within a HTML document. Specifically, this
***REMOVED*** regular expression matches if (comment from here on and regex copied from
***REMOVED*** Soy's EscapingConventions):
***REMOVED*** (1) Either a protocol in a whitelist (http, https, mailto).
***REMOVED*** (2) or no protocol.  A protocol must be followed by a colon. The below
***REMOVED***     allows that by allowing colons only after one of the characters [/?#].
***REMOVED***     A colon after a hash (#) must be in the fragment.
***REMOVED***     Otherwise, a colon after a (?) must be in a query.
***REMOVED***     Otherwise, a colon after a single solidus (/) must be in a path.
***REMOVED***     Otherwise, a colon after a double solidus (//) must be in the authority
***REMOVED***     (before port).
***REMOVED***
***REMOVED*** The pattern disallows &, used in HTML entity declarations before
***REMOVED*** one of the characters in [/?#]. This disallows HTML entities used in the
***REMOVED*** protocol name, which should never happen, e.g. "h&#116;tp" for "http".
***REMOVED*** It also disallows HTML entities in the first path part of a relative path,
***REMOVED*** e.g. "foo&lt;bar/baz".  Our existing escaping functions should not produce
***REMOVED*** that. More importantly, it disallows masking of a colon,
***REMOVED*** e.g. "javascript&#58;...".
***REMOVED***
***REMOVED*** @private
***REMOVED*** @const {!RegExp}
***REMOVED***
goog.html.SAFE_URL_PATTERN_ = /^(?:(?:https?|mailto):|[^&:/?#]*(?:[/?#]|$))/i;


***REMOVED***
***REMOVED*** Creates a SafeUrl object from {@code url}. If {@code url} is a
***REMOVED*** goog.html.SafeUrl then it is simply returned. Otherwise the input string is
***REMOVED*** validated to match a pattern of commonly used safe URLs. The string is
***REMOVED*** converted to UTF-8 and non-whitelisted characters are percent-encoded. The
***REMOVED*** string wrapped by the created SafeUrl will thus contain only ASCII printable
***REMOVED*** characters.
***REMOVED***
***REMOVED*** {@code url} may be a URL with the http, https, or mailto scheme,
***REMOVED*** or a relative URL (i.e., a URL without a scheme; specifically, a
***REMOVED*** scheme-relative, absolute-path-relative, or path-relative URL).
***REMOVED***
***REMOVED*** {@code url} is converted to UTF-8 and non-whitelisted characters are
***REMOVED*** percent-encoded. Whitelisted characters are '%' and, from RFC 3986,
***REMOVED*** unreserved characters and reserved characters, with the exception of '\'',
***REMOVED*** '(' and ')'. This ensures the the SafeUrl contains only ASCII-printable
***REMOVED*** characters and reduces the chance of security bugs were it to be
***REMOVED*** interpolated into a specific context without the necessary escaping.
***REMOVED***
***REMOVED*** If {@code url} fails validation or does not UTF-16 decode correctly
***REMOVED*** (JavaScript strings are UTF-16 encoded), this function returns a SafeUrl
***REMOVED*** object containing an innocuous string, goog.html.SafeUrl.INNOCUOUS_STRING.
***REMOVED***
***REMOVED*** @see http://url.spec.whatwg.org/#concept-relative-url
***REMOVED*** @param {string|!goog.string.TypedString} url The URL to validate.
***REMOVED*** @return {!goog.html.SafeUrl} The validated URL, wrapped as a SafeUrl.
***REMOVED***
goog.html.SafeUrl.sanitize = function(url) {
  if (url instanceof goog.html.SafeUrl) {
    return url;
  }
  else if (url.implementsGoogStringTypedString) {
    url = url.getTypedStringValue();
  } else {
    url = String(url);
  }
  if (!goog.html.SAFE_URL_PATTERN_.test(url)) {
    url = goog.html.SafeUrl.INNOCUOUS_STRING;
  } else {
    url = goog.html.SafeUrl.normalize_(url);
  }
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse_(
      url);
***REMOVED***


***REMOVED***
***REMOVED*** Normalizes {@code url} the UTF-8 encoding of url, using a whitelist of
***REMOVED*** characters. Whitelisted characters are not percent-encoded.
***REMOVED*** @param {string} url The URL to normalize.
***REMOVED*** @return {string} The normalized URL.
***REMOVED*** @private
***REMOVED***
goog.html.SafeUrl.normalize_ = function(url) {
  try {
    var normalized = encodeURI(url);
  } catch (e) {  // Happens if url contains invalid surrogate sequences.
    return goog.html.SafeUrl.INNOCUOUS_STRING;
  }

  return normalized.replace(
      goog.html.SafeUrl.NORMALIZE_MATCHER_,
      function(match) {
        return goog.html.SafeUrl.NORMALIZE_REPLACER_MAP_[match];
      });
***REMOVED***


***REMOVED***
***REMOVED*** Matches characters and strings which need to be replaced in the string
***REMOVED*** generated by encodeURI. Specifically:
***REMOVED***
***REMOVED*** - '\'', '(' and ')' are not encoded. They are part of the reserved
***REMOVED***   characters group in RFC 3986 but only appear in the obsolete mark
***REMOVED***   production in Appendix D.2 of RFC 3986, so they can be encoded without
***REMOVED***   changing semantics.
***REMOVED*** - '[' and ']' are encoded by encodeURI, despite being reserved characters
***REMOVED***   which can be used to represent IPv6 addresses. So they need to be decoded.
***REMOVED*** - '%' is encoded by encodeURI. However, encoding '%' characters that are
***REMOVED***   already part of a valid percent-encoded sequence changes the semantics of a
***REMOVED***   URL, and hence we need to preserve them. Note that this may allow
***REMOVED***   non-encoded '%' characters to remain in the URL (i.e., occurrences of '%'
***REMOVED***   that are not part of a valid percent-encoded sequence, for example,
***REMOVED***   'ab%xy').
***REMOVED***
***REMOVED*** @const {!RegExp}
***REMOVED*** @private
***REMOVED***
goog.html.SafeUrl.NORMALIZE_MATCHER_ = /[()']|%5B|%5D|%25/g;


***REMOVED***
***REMOVED*** Map of replacements to be done in string generated by encodeURI.
***REMOVED*** @const {!Object.<string, string>}
***REMOVED*** @private
***REMOVED***
goog.html.SafeUrl.NORMALIZE_REPLACER_MAP_ = {
  '\'': '%27',
  '(': '%28',
  ')': '%29',
  '%5B': '[',
  '%5D': ']',
  '%25': '%'
***REMOVED***


***REMOVED***
***REMOVED*** Type marker for the SafeUrl type, used to implement additional run-time
***REMOVED*** type checking.
***REMOVED*** @const
***REMOVED*** @private
***REMOVED***
goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {***REMOVED***


***REMOVED***
***REMOVED*** Utility method to create SafeUrl instances.
***REMOVED***
***REMOVED*** This function is considered "package private", i.e. calls (using "suppress
***REMOVED*** visibility") from other files within this package are considered acceptable.
***REMOVED*** DO NOT call this function from outside the goog.html package; use appropriate
***REMOVED*** wrappers instead.
***REMOVED***
***REMOVED*** @param {string} url The string to initialize the SafeUrl object with.
***REMOVED*** @return {!goog.html.SafeUrl} The initialized SafeUrl object.
***REMOVED*** @private
***REMOVED***
goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse_ = function(
    url) {
  var safeUrl = new goog.html.SafeUrl();
  safeUrl.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = url;
  return safeUrl;
***REMOVED***
